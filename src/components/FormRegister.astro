---
const tipos = {
  "paq x 4": {
    value: 4,
    color: "green",
  },
  "paq x 2": {
    value: 2,
    color: "green",
  },
  "paq x 9": {
    value: 9,
    color: "green",
  },
  "balde 4GL": {
    value: 1,
    color: "green",
  },
  "balde 1GL": {
    value: 1,
    color: "green",
  },
  "caja teknocola": {
    value: 1,
    color: "green",
  },
  "caja x 12 tintes": {
    value: 12,
    color: "green",
  },
  "caja temple 25kg": {
    value: 1,
    color: "green",
  },
  "caja temple 5 x 5kg": {
    value: 1,
    color: "green",
  },
  "bolsa temple 25kg": {
    value: 1,
    color: "green",
  },
  "bolsa temple 5 x 5kg": {
    value: 5,
    color: "green",
  },

  "caja x 4": {
    value: 4,
    color: "green",
  },
  unidades: {
    value: 1,
    color: "green",
  },
};
---

<dialog id="formDialog">
  <form class="grid gap-3" id="form-register">
    <!-- Producto -->
    <fieldset>
      <label for="producto">Producto</label>
      <input class="mt-2.5" type="text" id="producto" name="producto" required />
    </fieldset>

    <!-- Tipo -->
    <fieldset id="grupo-tipo">
      <label for="tipo">Tipo</label>
      <div class="flex gap-4 mt-2.5 items-center">
        <!-- Tipo select or input -->
        <div id="tipo-contenedor" class="grow">
          <select id="tipoSelect" name="tipoSelect" required>
            <option value="">Tipo?</option>
            {Object.entries(tipos).map(([label, { value }]) => <option value={value}>{label}</option>)}
          </select>

          <input type="text" id="tipoInput" name="tipoInput" placeholder="Escribe tu tipo" style="display: none;" />
        </div>

        <!-- radio buttons -->
        <div class="flex">
          <label>
            <input type="radio" name="tipo-opcion" value="select" checked />
            Select
          </label>
          <label>
            <input type="radio" name="tipo-opcion" value="custom" />
            Custom
          </label>
        </div>
      </div>
    </fieldset>

    <!-- Paq -->
    <fieldset>
      <label for="paq">Paq</label>
      <input class="mt-2.5" type="number" id="paq" name="paq" min="1" required />
    </fieldset>

    <!-- Cantidad -->
    <fieldset>
      <label for="cantidad-area">Cantidad</label>
      <textarea id="cantidad-area" inputmode="numeric" name="cantidad" rows="4" class="mt-2.5 w-full" required
      ></textarea>
    </fieldset>

    <!-- BotÃ³n -->
    <div class="flex gap-4 [&>*]:flex-1">
      <button type="submit" class="button-style green" id="calcularBtn">Guardar</button>
      <button type="button" class="button-style red" onclick="document.getElementById('formDialog').close()"
        >Cancelar</button
      >
    </div>
  </form>
</dialog>

<style>
  dialog {
    border: none;
    border-radius: 8px;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    background: rgb(27, 27, 27);
    padding: 1rem;
    max-width: 500px;
  }
  dialog::backdrop {
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(1.5px);
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const form = document.getElementById("form-register") as HTMLFormElement;
    const contenedor = document.getElementById("tipo-contenedor");
    const contenedorTipo = document.getElementById("grupo-tipo");

    const select = contenedor?.querySelector("select") as HTMLSelectElement;
    const input = contenedor?.querySelector('input[type="text"]') as HTMLInputElement;
    const inputPaq = document.getElementById("paq") as HTMLInputElement;
    const textarea = document.getElementById("cantidad-area") as HTMLTextAreaElement | null;

    contenedorTipo?.addEventListener("click", (e: MouseEvent) => {
      const target = e.target as HTMLInputElement;

      if (target?.name === "tipo-opcion") {
        if (target.value === "select") {
          select.style.display = "block";
          select.required = true;

          input.style.display = "none";
          input.required = false;
        } else {
          input.style.display = "block";
          input.required = true;

          select.style.display = "none";
          select.required = false;
        }
      }
    });

    textarea?.addEventListener("input", ({ target }) => {
      const input = target as HTMLTextAreaElement;
      const { value } = input;

      if (value.endsWith(" ")) {
        const words = value.split(" ");
        const lastWord = words.at(-2);

        if (/^\d$/.test(lastWord ?? "")) {
          words[words.length - 2] = "0" + lastWord;
          input.value = words.join(" ");
        }
      }
    });

    select?.addEventListener("change", () => {
      if (inputPaq) {
        inputPaq.value = select.value; // coloca el value del option en el input
      }
    });

    function getTipoOptions(): HTMLInputElement | HTMLSelectElement | null {
      const opcion = document.querySelector<HTMLInputElement>('input[name="tipo-opcion"]:checked')?.value;

      if (opcion === "select") {
        return document.getElementById("tipoSelect") as HTMLSelectElement;
      }
      return document.getElementById("tipoInput") as HTMLInputElement;
    }

    function getTipoTexto(el: HTMLInputElement | HTMLSelectElement | null): string {
      if (!el) return "";
      return el instanceof HTMLSelectElement ? (el.selectedOptions[0]?.text ?? "") : (el.value ?? "");
    }

    form?.addEventListener("submit", (e) => {
      e.preventDefault();

      const producto = (document.getElementById("producto") as HTMLInputElement).value.trim();
      const paquete = +(document.getElementById("paq") as HTMLInputElement).value;
      const cantidadRaw = (document.getElementById("cantidad-area") as HTMLTextAreaElement).value.trim();

      const tipo = getTipoOptions();
      const tipoTexto = getTipoTexto(tipo);

      const cantidades = cantidadRaw
        .split(/[\s,]+/)
        .map(Number)
        .filter((n) => !isNaN(n));

      const { paq, uni, total, bultos } = calcularPaquetes(paquete, cantidades, tipoTexto);

      const dataForm: Product = {
        producto,
        done: false,
        paquete,
        items: cantidades.length,
        tipo: tipoTexto,
        cantidades: cantidadRaw,
        calc: { paq, uni, total },
        bultos,
      };

      const guiaActiva = localStorage.getItem("guiaActiva")!;
      saveToLocalStorage(guiaActiva, dataForm);
      resetForm();
    });

    function resetForm() {
      (document.getElementById("producto") as HTMLInputElement).value = "";
      (document.getElementById("paq") as HTMLInputElement).value = "";
      (document.getElementById("cantidad-area") as HTMLTextAreaElement).value = "";

      (document.getElementById("tipoInput") as HTMLInputElement).value = "";
      (document.getElementById("tipoSelect") as HTMLSelectElement).selectedIndex = 0;

      // marcar por defecto el radio con value="select"
      const defaultRadio = document.querySelector<HTMLInputElement>('input[name="tipo-opcion"][value="select"]');
      if (defaultRadio) defaultRadio.checked = true;
    }

    function calcularPaquetes(paquete: number, cantidades: number[], tipo: string) {
      const total = cantidades.reduce((a, b) => a + b, 0);
      const paq = Math.floor(total / paquete);
      const uni = total % paquete;

      let bultos = "";
      if (paq && uni) bultos = `${paq} ${tipo} + ${uni} uni`;
      else if (paq) bultos = `${paq} ${tipo}`;
      else if (uni) bultos = `${uni} uni`;

      return { paq, uni, total, bultos };
    }

    function saveToLocalStorage(key: string, product: Product) {
      const raw = localStorage.getItem("data");
      const data: Data = raw ? JSON.parse(raw) : {};

      const products = data[key] ?? [];

      const index = products.findIndex((p) => p.producto === product.producto && p.tipo === product.tipo);

      let newProducts: Product[];
      if (index !== -1) {
        // ðŸ”„ Actualizar
        newProducts = products.map((p, i) => (i === index ? { ...product } : p));
      } else {
        // âž• Agregar
        newProducts = [...products, { ...product }];
      }

      // Construir el nuevo objeto de data
      const newData: Data = {
        ...data,
        [key]: newProducts,
      };

      localStorage.setItem("data", JSON.stringify(newData));
      window.dispatchEvent(new Event("register-product"));
      (document.getElementById("formDialog") as HTMLDialogElement)?.close();
    }
  });
</script>
